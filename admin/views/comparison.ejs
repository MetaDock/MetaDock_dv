<!DOCTYPE html>
<html>
<head>
    <meta charset="utf-8">
    <title>Help Comparison Report - <%= toolName %></title>
    <style>
        body {
            font-family: 'Consolas', monospace;
            margin: 0;
            padding: 20px;
            background: #f5f5f5;
        }
        .container {
            max-width: 1400px;
            margin: 0 auto;
            background: white;
            border-radius: 8px;
            box-shadow: 0 2px 4px rgba(0,0,0,0.1);
            padding: 20px;
        }
        .header {
            background: #2c3e50;
            color: white;
            padding: 20px;
            border-radius: 8px 8px 0 0;
            margin: -20px -20px 20px -20px;
        }
        .issues {
            background: #fff3cd;
            color: #856404;
            padding: 15px;
            border-radius: 4px;
            margin-bottom: 20px;
            border-left: 5px solid #ffeeba;
        }
        .comparison {
            display: flex;
            margin-bottom: 10px;
            border: 1px solid #eee;
            border-radius: 4px;
            position: relative;
        }
        .original, .generated {
            flex: 1;
            padding: 10px;
            white-space: pre-wrap;
            font-size: 14px;
            line-height: 1.5;
        }
        .original {
            background: #fff8f8;
            border-right: 1px solid #eee;
        }
        .generated {
            background: #f8fff8;
        }
        .diff-header {
            background: #f8f9fa;
            padding: 10px;
            margin: -10px -10px 10px -10px;
            border-bottom: 1px solid #eee;
            font-weight: bold;
        }
        .timestamp {
            color: #6c757d;
            font-size: 0.9em;
            margin-top: 5px;
        }
        .empty {
            color: #999;
            font-style: italic;
            padding: 20px;
            text-align: center;
            background: #f8f9fa;
        }
        .match {
            background: #e8f5e9;
        }
        .nomatch {
            background: #ffebee;
        }
        .section-actions {
            position: absolute;
            right: 10px;
            top: 10px;
            display: flex;
            gap: 5px;
            opacity: 0;
            transition: opacity 0.2s;
        }
        .comparison:hover .section-actions {
            opacity: 1;
        }
        .btn {
            padding: 4px 8px;
            border: none;
            border-radius: 4px;
            cursor: pointer;
            font-size: 12px;
            color: white;
        }
        .btn-add {
            background: #28a745;
        }
        .btn-modify {
            background: #17a2b8;
        }
        .btn-delete {
            background: #dc3545;
        }
        .modal {
            position: fixed;
            top: 0;
            left: 0;
            width: 100%;
            height: 100%;
            background: rgba(0, 0, 0, 0.5);
            display: flex;
            justify-content: center;
            align-items: center;
            z-index: 1000;
        }
        .modal-content {
            background: white;
            padding: 20px;
            border-radius: 8px;
            width: 90%;
            max-width: 1000px;
            max-height: 90vh;
            overflow-y: auto;
        }
        .modal-body {
            display: flex;
            gap: 20px;
        }
        .section-form {
            flex: 1;
            min-width: 300px;
        }
        .preview-section {
            flex: 1;
            min-width: 300px;
            padding: 15px;
            background: #f8f9fa;
            border-radius: 4px;
            border: 1px solid #dee2e6;
        }
        .form-group {
            margin-bottom: 15px;
        }
        .form-group label {
            display: block;
            margin-bottom: 5px;
            font-weight: bold;
        }
        .form-group input[type="text"],
        .form-group textarea {
            width: 100%;
            padding: 8px;
            border: 1px solid #ddd;
            border-radius: 4px;
        }
        .form-group textarea {
            height: 100px;
            resize: vertical;
        }
        .preview-content {
            white-space: pre-wrap;
            font-family: monospace;
            padding: 10px;
            background: white;
            border: 1px solid #ddd;
            border-radius: 4px;
            max-height: 400px;
            overflow-y: auto;
        }
        .modal-actions {
            display: flex;
            justify-content: flex-end;
            gap: 10px;
            margin-top: 20px;
        }
        .modal-actions button {
            padding: 8px 16px;
            border: none;
            border-radius: 4px;
            cursor: pointer;
            font-weight: bold;
        }
        .modal-actions button[type="submit"] {
            background: #28a745;
            color: white;
        }
        .modal-actions button[type="button"] {
            background: #6c757d;
            color: white;
        }
        .modal-actions button:hover {
            opacity: 0.9;
        }
    </style>
</head>
<body>
    <div class="container">
        <div class="header">
            <h1>Help Comparison Report - <%= toolName %></h1>
            <div class="timestamp">Generated on: <%= timestamp %></div>
            <div style="margin-top: 10px;">
                <button class="btn btn-add" onclick="showUsageModal()">Add Usage</button>
                <button class="btn" style="background: #6c757d; margin-left: 10px;" onclick="window.location.href='/admin/tool_management'">Return to Tool Management</button>
            </div>
        </div>
        
        <%- comparisonResult.replace(/<h1>Help Comparison Report<\/h1>\s*<div class="timestamp">Generated on: .*?<\/div>/g, '') %>
    </div>

    <script>
        // Add event listeners for section actions
        document.querySelectorAll('.comparison').forEach(section => {
            const sectionId = section.dataset.sectionId;
            if (sectionId) {
                const actionsDiv = document.createElement('div');
                actionsDiv.className = 'section-actions';
                
                // 检查是否是 usage 部分
                const generatedDiv = section.querySelector('.generated');
                const text = generatedDiv.textContent.trim();
                const isUsage = text.toLowerCase().startsWith('usage:');
                
                if (isUsage) {
                    actionsDiv.innerHTML = `
                        <button class="btn btn-modify" onclick="modifyUsage(this.closest('.comparison'))">Modify</button>
                        <button class="btn btn-delete" onclick="deleteUsage(this.closest('.comparison'))">Delete</button>
                    `;
                } else {
                    actionsDiv.innerHTML = `
                        <button class="btn btn-add" onclick="addSection()">Add</button>
                        <button class="btn btn-modify" onclick="modifySection(this.closest('.comparison'))">Modify</button>
                        <button class="btn btn-delete" onclick="deleteSection(this.closest('.comparison'))">Delete</button>
                    `;
                }
                section.appendChild(actionsDiv);
            }
        });

        // Section action handlers
        async function addSection() {
            showSectionModal({
                category: '',
                short: '',
                long: '',
                needs_input: false,
                description: ''
            }, 'add');
        }

        async function modifySection(sectionElement) {
            try {
                // 从生成的帮助文本中提取参数信息
                const generatedDiv = sectionElement.querySelector('.generated');
                console.log('Generated div:', generatedDiv); // 调试日志
                
                // 获取所有文本节点
                const textNodes = [];
                const walk = document.createTreeWalker(
                    generatedDiv,
                    NodeFilter.SHOW_TEXT,
                    null,
                    false
                );
                let node;
                while (node = walk.nextNode()) {
                    textNodes.push(node.textContent);
                }
                const generatedText = textNodes.join('\n');
                
                console.log('Generated text:', generatedText); // 调试日志
                const lines = generatedText.split('\n');
                let short = '', long = '', description = '';
                let isDescription = false;
                let foundParameter = false;
                
                // 检查是否是 usage 部分
                const isUsage = lines.some(line => line.trim().toLowerCase().startsWith('usage:'));
                if (isUsage) {
                    // 如果是 usage 部分，直接调用 modifyUsage
                    modifyUsage(sectionElement);
                    return;
                }
                
                // 解析参数行和描述
                for (let i = 0; i < lines.length; i++) {
                    const line = lines[i].trim();
                    if (!line) continue;

                    console.log('Processing line:', line); // 调试日志

                    // 跳过 "Generated" 标题行
                    if (line === 'Generated') continue;

                    if (!isDescription && !line.startsWith(' ')) {
                        // 这是参数行
                        console.log('Found parameter line:', line); // 调试日志
                        
                        // 分离参数和描述
                        const parts = line.split(/\s{2,}/);
                        if (parts.length > 0) {
                            const paramPart = parts[0].trim();
                            // 分离短选项和长选项
                            const options = paramPart.split(',').map(opt => opt.trim());
                            for (const opt of options) {
                                if (opt.startsWith('--')) {
                                    // 提取长选项名称（不包括值）
                                    const longOpt = opt.split(/\s+/)[0];
                                    long = longOpt;
                                    foundParameter = true;
                                } else if (opt.startsWith('-')) {
                                    short = opt;
                                    foundParameter = true;
                                }
                            }
                            // 如果有描述部分
                            if (parts.length > 1) {
                                description = parts[1].trim();
                            }
                        }
                        isDescription = true;
                    } else if (isDescription && line.startsWith(' ')) {
                        // 这是描述行
                        description += (description ? ' ' : '') + line.trim();
                    } else if (isDescription && !line.startsWith(' ')) {
                        // 遇到新的参数行，结束当前描述
                        break;
                    }
                }

                console.log('Extracted values:', { short, long, description }); // 调试日志

                // 使用 short 或 long 选项来获取完整的参数数据
                const optionValue = long || short;
                if (!optionValue || !foundParameter) {
                    console.log('No option value found in text:', generatedText); // 调试日志
                    throw new Error('Could not find parameter option');
                }

                console.log('Using option value:', optionValue); // 调试日志

                // 使用 encodeURIComponent 来正确编码参数值
                const encodedOption = encodeURIComponent(optionValue);
                const response = await fetch(`/admin/tools/<%= toolName %>/parameters/${encodedOption}`);
                if (!response.ok) {
                    const errorData = await response.json();
                    throw new Error(errorData.error || 'Failed to get section data');
                }
                const sectionData = await response.json();
                showSectionModal(sectionData, 'modify', optionValue);
            } catch (error) {
                console.error('Error modifying section:', error);
                alert(error.message || 'Error modifying section');
            }
        }

        async function deleteSection(sectionElement) {
            try {
                const generatedDiv = sectionElement.querySelector('.generated');
                const textNodes = [];
                const walk = document.createTreeWalker(
                    generatedDiv,
                    NodeFilter.SHOW_TEXT,
                    null,
                    false
                );
                let node;
                while (node = walk.nextNode()) {
                    textNodes.push(node.textContent);
                }
                const generatedText = textNodes.join('\n');
                const lines = generatedText.split('\n').map(line => line.trim()).filter(line => line && line !== 'Generated');
                
                console.log('Content lines:', lines);

                if (lines.length === 0) {
                    throw new Error('No content found in section');
                }

                // 检查是否是 usage 部分
                const isUsage = lines[0].toLowerCase().startsWith('usage:');
                if (isUsage) {
                    // 如果是 usage 部分，调用 deleteUsage
                    await deleteUsage(sectionElement);
                    return;
                }

                // 检查是否是分类标题（以冒号结尾的单行）
                if (lines.length === 1 && lines[0].endsWith(':')) {
                    const category = lines[0].slice(0, -1); // 移除冒号
                    console.log('Found category:', category);

                    if (confirm(`Are you sure you want to delete the category "${category}"?`)) {
                        const response = await fetch(`/admin/tools/<%= toolName %>/parameters/category/${encodeURIComponent(category)}`, {
                            method: 'DELETE'
                        });

                        if (response.ok) {
                            window.location.reload();
                        } else {
                            const errorData = await response.json();
                            throw new Error(errorData.error || 'Failed to delete category');
                        }
                    }
                    return;
                }

                // 处理参数行
                let short = '', long = '';
                let foundParameter = false;
                
                for (const line of lines) {
                    if (!line.startsWith(' ')) {
                        const parts = line.split(',').map(part => part.trim());
                        for (const part of parts) {
                            if (part.startsWith('--')) {
                                long = part;
                                foundParameter = true;
                            } else if (part.startsWith('-')) {
                                short = part;
                                foundParameter = true;
                            }
                        }
                        break;
                    }
                }

                const optionValue = long || short;
                if (!optionValue || !foundParameter) {
                    throw new Error('Could not find parameter option');
                }

                if (confirm('Are you sure you want to delete this parameter?')) {
                    const encodedValue = encodeURIComponent(optionValue);
                    const response = await fetch(`/admin/tools/<%= toolName %>/parameters/${encodedValue}`, {
                        method: 'DELETE'
                    });

                    if (response.ok) {
                        window.location.reload();
                    } else {
                        const errorData = await response.json();
                        throw new Error(errorData.error || 'Failed to delete parameter');
                    }
                }
            } catch (error) {
                console.error('Error deleting section:', error);
                alert(error.message || 'Error deleting section');
            }
        }

        function showSectionModal(data, mode, sectionId = null) {
            const modal = document.createElement('div');
            modal.className = 'modal';
            modal.innerHTML = `
                <div class="modal-content">
                    <h2>${mode === 'add' ? 'Add New Section' : 'Modify Section'}</h2>
                    <div class="modal-body">
                        <form id="sectionForm" class="section-form">
                            <div class="form-group">
                                <label>Category:</label>
                                <input type="text" name="category" value="${data.category || ''}" required>
                            </div>
                            <div class="form-group">
                                <label>Short Option:</label>
                                <input type="text" name="short" value="${data.short || ''}">
                            </div>
                            <div class="form-group">
                                <label>Long Option:</label>
                                <input type="text" name="long" value="${data.long || ''}">
                            </div>
                            <div class="form-group">
                                <label>Needs Input:</label>
                                <input type="checkbox" name="needs_input" ${data.needs_input ? 'checked' : ''}>
                            </div>
                            <div class="form-group">
                                <label>Description:</label>
                                <textarea name="description" required>${data.description || ''}</textarea>
                            </div>
                            <div class="modal-actions">
                                <button type="button" onclick="previewSection(this.closest('form'))">Preview</button>
                                <button type="submit">Confirm</button>
                                <button type="button" onclick="this.closest('.modal').remove()">Cancel</button>
                            </div>
                        </form>
                        <div class="preview-section">
                            <h3>Preview</h3>
                            <div id="previewContent" class="preview-content"></div>
                        </div>
                    </div>
                </div>
            `;

            document.body.appendChild(modal);

            // Handle form submission
            modal.querySelector('form').addEventListener('submit', async (e) => {
                e.preventDefault();
                const formData = new FormData(e.target);
                const data = Object.fromEntries(formData.entries());
                data.needs_input = formData.get('needs_input') === 'on';

                // 处理 short 和 long 选项的格式
                if (data.short && !data.short.startsWith('-')) {
                    data.short = '-' + data.short;
                }
                if (data.long && !data.long.startsWith('--')) {
                    data.long = '--' + data.long;
                }

                try {
                    const url = mode === 'add' 
                        ? `/admin/tools/<%= toolName %>/parameters`
                        : `/admin/tools/<%= toolName %>/parameters/${sectionId}`;
                    
                    const response = await fetch(url, {
                        method: mode === 'add' ? 'POST' : 'PUT',
                        headers: {
                            'Content-Type': 'application/json'
                        },
                        body: JSON.stringify(data)
                    });

                    if (response.ok) {
                        const result = await response.json();
                        if (result.success) {
                            // 关闭模态框
                            modal.remove();
                            // 刷新页面
                            window.location.reload();
                        } else {
                            throw new Error(result.error || `Failed to ${mode} section`);
                        }
                    } else {
                        const errorData = await response.json();
                        throw new Error(errorData.error || `Failed to ${mode} section`);
                    }
                } catch (error) {
                    console.error(`Error ${mode}ing section:`, error);
                    alert(error.message || `Error ${mode}ing section`);
                }
            });
        }

        async function previewSection(form) {
            try {
                const formData = new FormData(form);
                const data = Object.fromEntries(formData.entries());
                data.needs_input = formData.get('needs_input') === 'on';

                // 处理 short 和 long 选项的格式
                if (data.short && !data.short.startsWith('-')) {
                    data.short = '-' + data.short;
                }
                if (data.long && !data.long.startsWith('--')) {
                    data.long = '--' + data.long;
                }

                const response = await fetch(`/admin/tools/<%= toolName %>/preview`, {
                    method: 'POST',
                    headers: {
                        'Content-Type': 'application/json'
                    },
                    body: JSON.stringify(data)
                });

                if (!response.ok) {
                    const errorData = await response.json();
                    throw new Error(errorData.error || 'Failed to generate preview');
                }

                const preview = await response.json();
                const previewContent = form.closest('.modal-content').querySelector('#previewContent');
                previewContent.innerHTML = `<pre>${JSON.stringify(preview.parameter, null, 4)}</pre>`;
            } catch (error) {
                console.error('Error generating preview:', error);
                alert(error.message || 'Error generating preview');
            }
        }

        // Usage management functions
        async function modifyUsage(sectionElement) {
            try {
                const generatedDiv = sectionElement.querySelector('.generated');
                const text = generatedDiv.textContent.trim();
                // 移除 "Generated" 并获取以 "usage:" 开头的部分
                const usage = text.replace(/^Generated\s*/i, '').trim();
                
                console.log('Initial text:', text);
                console.log('Extracted usage:', usage);
                
                // 检查是否包含 usage（不区分大小写）
                if (!usage.toLowerCase().includes('usage')) {
                    throw new Error('Not a valid usage section');
                }

                // 获取所有 usage 部分
                const response = await fetch(`/admin/tools/<%= toolName %>/usage`);
                if (!response.ok) {
                    throw new Error('Failed to get usage data');
                }
                const usageData = await response.json();
                
                console.log('Received usage data:', usageData);
                
                // 找到当前 usage 的索引
                const index = usageData.usage.findIndex(u => {
                    // 首先检查是否包含 usage（不区分大小写）
                    const hasUsage = u.toLowerCase().includes('usage');
                    const currentHasUsage = usage.toLowerCase().includes('usage');
                    
                    if (!hasUsage || !currentHasUsage) {
                        return false;
                    }
                    
                    // 如果都包含 usage，则比较内容
                    const normalizedUsage = u.toLowerCase().trim();
                    const normalizedCurrentUsage = usage.toLowerCase().trim();
                    
                    console.log('Comparing usage strings:', {
                        originalUsage: u,
                        originalCurrentUsage: usage,
                        normalizedUsage,
                        normalizedCurrentUsage,
                        match: normalizedUsage === normalizedCurrentUsage
                    });
                    
                    return normalizedUsage === normalizedCurrentUsage;
                });

                if (index === -1) {
                    console.log('Available usages:', usageData.usage);
                    console.log('Current usage:', usage);
                    throw new Error('Usage not found');
                }

                showUsageModal({ usage: usageData.usage[index], index }, 'modify');
            } catch (error) {
                console.error('Error modifying usage:', error);
                alert(error.message || 'Error modifying usage');
            }
        }

        function showUsageModal(data = { usage: '', index: -1 }, mode = 'add') {
            const modal = document.createElement('div');
            modal.className = 'modal';
            
            // 确保 usage 以 "usage: " 开头
            let usageText = data.usage || '';
            if (mode === 'add' && !usageText.toLowerCase().startsWith('usage:')) {
                usageText = 'usage: ' + usageText;
            }
            
            modal.innerHTML = `
                <div class="modal-content">
                    <h2>${mode === 'add' ? 'Add New Usage' : 'Modify Usage'}</h2>
                    <div class="modal-body">
                        <form id="usageForm" class="section-form">
                            <div class="form-group">
                                <label>Usage:</label>
                                <textarea name="usage" required style="height: 100px;">${usageText}</textarea>
                            </div>
                            <input type="hidden" name="index" value="${data.index}">
                            <div class="modal-actions">
                                <button type="button" onclick="previewUsage(this.closest('form'))">Preview</button>
                                <button type="submit">Confirm</button>
                                <button type="button" onclick="this.closest('.modal').remove()">Cancel</button>
                            </div>
                        </form>
                        <div class="preview-section">
                            <h3>Preview</h3>
                            <div id="previewContent" class="preview-content"></div>
                        </div>
                    </div>
                </div>
            `;

            document.body.appendChild(modal);

            // Handle form submission
            modal.querySelector('form').addEventListener('submit', async (e) => {
                e.preventDefault();
                const formData = new FormData(e.target);
                let formUsage = formData.get('usage');
                
                // 确保提交的 usage 以 "usage: " 开头
                if (!formUsage.toLowerCase().startsWith('usage:')) {
                    formUsage = 'usage: ' + formUsage;
                }
                
                const formIndex = formData.get('index');

                try {
                    // 获取当前的 usage 数据
                    const response = await fetch(`/admin/tools/<%= toolName %>/usage`);
                    if (!response.ok) {
                        throw new Error('Failed to get usage data');
                    }
                    const usageData = await response.json();
                    
                    // 准备新的 usage 数据
                    let newUsageData;
                    if (mode === 'add') {
                        // 添加新的 usage 数组
                        newUsageData = {
                            usage: [...usageData.usage, formUsage]
                        };
                    } else {
                        // 修改现有的 usage
                        newUsageData = {
                            usage: usageData.usage.map((u, i) => i === parseInt(formIndex) ? formUsage : u)
                        };
                    }
                    
                    // 发送更新请求
                    const updateResponse = await fetch(`/admin/tools/<%= toolName %>/usage`, {
                        method: 'PUT',
                        headers: {
                            'Content-Type': 'application/json'
                        },
                        body: JSON.stringify(newUsageData)
                    });

                    if (updateResponse.ok) {
                        const result = await updateResponse.json();
                        if (result.success) {
                            modal.remove();
                            window.location.reload();
                        } else {
                            throw new Error(result.error || `Failed to ${mode} usage`);
                        }
                    } else {
                        const errorData = await updateResponse.json();
                        throw new Error(errorData.error || `Failed to ${mode} usage`);
                    }
                } catch (error) {
                    console.error(`Error ${mode}ing usage:`, error);
                    alert(error.message || `Error ${mode}ing usage`);
                }
            });
        }

        async function deleteUsage(sectionElement) {
            try {
                const generatedDiv = sectionElement.querySelector('.generated');
                const text = generatedDiv.textContent.trim();
                const usage = text.replace(/^Generated\s*/i, '').trim();

                if (!usage.toLowerCase().startsWith('usage:')) {
                    throw new Error('Not a valid usage section');
                }

                // 获取所有 usage 部分
                const response = await fetch(`/admin/tools/<%= toolName %>/usage`);
                if (!response.ok) {
                    throw new Error('Failed to get usage data');
                }
                const usageData = await response.json();
                
                // 找到当前 usage 的索引
                const index = usageData.usage.findIndex(u => u === usage);
                if (index === -1) {
                    throw new Error('Usage not found');
                }

                if (confirm('Are you sure you want to delete this usage?')) {
                    const response = await fetch(`/admin/tools/<%= toolName %>/usage/${index}`, {
                        method: 'DELETE'
                    });

                    if (response.ok) {
                        window.location.reload();
                    } else {
                        const errorData = await response.json();
                        throw new Error(errorData.error || 'Failed to delete usage');
                    }
                }
            } catch (error) {
                console.error('Error deleting usage:', error);
                alert(error.message || 'Error deleting usage');
            }
        }

        async function previewUsage(form) {
            try {
                const formData = new FormData(form);
                const data = {
                    usage: formData.get('usage')
                };

                const response = await fetch(`/admin/tools/<%= toolName %>/usage/preview`, {
                    method: 'POST',
                    headers: {
                        'Content-Type': 'application/json'
                    },
                    body: JSON.stringify(data)
                });

                if (!response.ok) {
                    const errorData = await response.json();
                    throw new Error(errorData.error || 'Failed to generate preview');
                }

                const preview = await response.json();
                const previewContent = form.closest('.modal-content').querySelector('#previewContent');
                previewContent.innerHTML = `<pre>${JSON.stringify(preview, null, 4)}</pre>`;
            } catch (error) {
                console.error('Error generating preview:', error);
                alert(error.message || 'Error generating preview');
            }
        }
    </script>
</body>
</html>