<%- include('../../public/views/partials/header', { title: 'Admin Dashboard' }) %>
<%- include('../../public/views/partials/navbar', { isAdmin: true, connectionDetails: connectionDetails }) %>

<style>
    .btn-custom-blue { background-color: #7480FF; color: black; border-color: #7480FF; }
    .btn-custom-blue:hover { background-color: #5a67d8; border-color: #5a67d8; }
    .btn-custom-red { background-color: #FF5861; color: black; border-color: #FF5861; }
    .btn-custom-red:hover { background-color: #e04851; border-color: #e04851; }
    
    .drop-zone {
        min-height: 500px;
        transition: background-color 0.2s ease;
    }
    .tool-tag {
        cursor: grab;
        color: white;
    }
    .tool-tag:active {
        cursor: grabbing;
    }
    /* Visual feedback for drag-and-drop */
    .drop-zone.drag-enter-ok {
        background-color: rgba(154, 225, 148, 0.2) !important; /* Light green overlay */
    }
    .drop-zone.drag-enter-fail {
        background-color: rgba(233, 160, 149, 0.2) !important; /* Light red overlay */
    }
    .tool-tag.sortable-ghost {
        opacity: 0.4;
    }
    .method-header {
        pointer-events: none;
    }
    .method-header * {
        pointer-events: none;
    }
    
    .validation-error {
        background-color: rgba(255, 88, 97, 0.1);
        border: 1px solid #FF5861;
        border-radius: 8px;
        padding: 16px;
        margin: 16px 0;
    }
    
    .validation-warning {
        background-color: rgba(255, 193, 7, 0.1);
        border: 1px solid #FFC107;
        border-radius: 8px;
        padding: 16px;
        margin: 16px 0;
    }
    
    .environment-status {
        padding: 8px 12px;
        border-radius: 6px;
        margin: 4px 0;
        font-size: 14px;
    }
    
    .status-success {
        background-color: rgba(76, 175, 80, 0.1);
        color: #4CAF50;
        border: 1px solid #4CAF50;
    }
    
    .status-error {
        background-color: rgba(244, 67, 54, 0.1);
        color: #F44336;
        border: 1px solid #F44336;
    }
    
    .status-warning {
        background-color: rgba(255, 193, 7, 0.1);
        color: #FF9800;
        border: 1px solid #FF9800;
    }
</style>

<main class="container mx-auto p-4 md:p-8 space-y-8">
    <!-- Back Button -->
    <div class="flex justify-start mb-4">
        <a href="/admin/search" class="btn btn-custom-blue text-lg">
            <i class="ti ti-arrow-left mr-2"></i>
            Back to Search
        </a>
    </div>

    <!-- Validation Errors -->
    <% if (locals.validationErrors && validationErrors.length > 0) { %>
        <div class="validation-error">
            <h3 class="text-lg font-semibold text-red-600 mb-2">
                <i class="ti ti-alert-circle mr-2"></i>
                Installation Validation Failed
            </h3>
            <ul class="list-disc list-inside space-y-1">
                <% validationErrors.forEach(error => { %>
                    <li class="text-red-700"><%= error %></li>
                <% }) %>
            </ul>
        </div>
    <% } %>

    <!-- Validation Warnings -->
    <% if (locals.validationWarnings && validationWarnings.length > 0) { %>
        <div class="validation-warning">
            <h3 class="text-lg font-semibold text-yellow-600 mb-2">
                <i class="ti ti-alert-triangle mr-2"></i>
                Installation Warnings
            </h3>
            <ul class="list-disc list-inside space-y-1">
                <% validationWarnings.forEach(warning => { %>
                    <li class="text-yellow-700"><%= warning %></li>
                <% }) %>
            </ul>
        </div>
    <% } %>


    <!-- Search Bar -->
    <div class="card bg-base-200 shadow-xl">
        <div class="card-body">
            <div class="flex items-center gap-4 mb-4">
                <h2 class="card-title text-2xl mb-4">
                    <i class="ti ti-search text-2xl"></i>
                    Search Tools
                </h2>
            </div>
            <div class="flex items-center gap-4">
                <input type="text" id="searchInput" placeholder="Search by tool name..." 
                       class="input input-bordered w-full text-base" />
                <button id="searchBtn" class="btn btn-custom-blue text-base">Search</button>
                <button id="clearBtn" class="btn btn-custom-red text-base">Clear</button>
            </div>
        </div>
    </div>

    <div class="card bg-base-200 shadow-xl">
        <div class="card-body">
            <div class="flex items-center gap-4 mb-4">
                <h2 class="card-title text-2xl mb-4">
                    <i class="ti ti-download text-2xl"></i>
                    Download Options
                </h2>
                <p class="text-base text-base-content/50 ml-6">Drag to switch installation method</p>
            </div>

            <div class="grid md:grid-cols-3 gap-6 mb-4">
                <h3 class="text-xl font-normal text-center">Anaconda</h3>
                <h3 class="text-xl font-normal text-center">Pip</h3>
                <h3 class="text-xl font-normal text-center">Git Clone</h3>
            </div>

            <div class="grid md:grid-cols-3 gap-6">
                <div id="anaconda-zone" data-method="anaconda" class="card bg-base-300 drop-zone">
                    <div class="card-body">
                        <div class="drop-container min-h-[400px]">
                            <% if (locals.selectedTools) { %>
                                <% selectedTools.forEach(tool => { %>
                                    <% if (tool.validMethods[0] === 'anaconda') { %>
                                        <div class="badge badge-success text-base p-4 tool-tag mb-2" 
                                             data-tool-id="<%= tool.id %>" 
                                             data-valid-methods='<%= JSON.stringify(tool.validMethods) %>'>
                                            <%= tool.name %>
                                        </div>
                                    <% } %>
                                <% }) %>
                            <% } %>
                        </div>
                    </div>
                </div>

                <div id="pip-zone" data-method="pip" class="card bg-base-300 drop-zone">
                    <div class="card-body">
                        <div class="drop-container min-h-[400px]">
                            <% if (locals.selectedTools) { %>
                                <% selectedTools.forEach(tool => { %>
                                    <% if (tool.validMethods[0] === 'pip') { %>
                                        <div class="badge badge-warning text-base p-4 tool-tag mb-2" 
                                             data-tool-id="<%= tool.id %>" 
                                             data-valid-methods='<%= JSON.stringify(tool.validMethods) %>'>
                                            <%= tool.name %>
                                        </div>
                                    <% } %>
                                <% }) %>
                            <% } %>
                        </div>
                    </div>
                </div>

                <div id="git-zone" data-method="git" class="card bg-base-300 drop-zone">
                    <div class="card-body">
                        <div class="drop-container min-h-[400px]">
                            <% if (locals.selectedTools) { %>
                                <% selectedTools.forEach(tool => { %>
                                    <% if (tool.validMethods[0] === 'git') { %>
                                        <div class="badge badge-info text-base p-4 tool-tag mb-2" 
                                             data-tool-id="<%= tool.id %>" 
                                             data-valid-methods='<%= JSON.stringify(tool.validMethods) %>'>
                                            <%= tool.name %>
                                        </div>
                                    <% } %>
                                <% }) %>
                            <% } %>
                        </div>
                    </div>
                </div>
            </div>

            <!-- Installation Path Configuration -->
            <div class="card bg-base-200 shadow-lg mt-6">
                <div class="card-body">
                    <h3 class="card-title text-xl mb-4">
                        <i class="ti ti-settings text-xl"></i>
                        Installation Path Configuration
                    </h3>
                    
                    <div class="grid md:grid-cols-2 gap-6">
                        <!-- Conda Environment Path -->
                        <div class="form-control">
                            <label class="label">
                                <span class="label-text font-semibold">Conda Environment Path</span>
                                <span class="label-text-alt text-gray-500">(Optional - will use system default if empty)</span>
                            </label>
                            <input type="text" id="condaEnvPath" name="condaEnvPath" 
                                   placeholder="/path/to/conda/environment" 
                                   class="input input-bordered" />
                            <label class="label">
                                <span class="label-text-alt">Leave empty to use system conda environment</span>
                                <span class="label-text-alt text-blue-600" id="current-conda-path">Current: waiting to check...</span>
                            </label>
                        </div>

                        <!-- Git Installation Path -->
                        <div class="form-control">
                            <label class="label">
                                <span class="label-text font-semibold">Git Installation Path</span>
                                <span class="label-text-alt text-gray-500">(Optional - defaults to /home)</span>
                            </label>
                            <input type="text" id="gitInstallPath" name="gitInstallPath" 
                                   placeholder="/path/to/git/installation" 
                                   class="input input-bordered" />
                            <label class="label">
                                <span class="label-text-alt">Leave empty to use /home directory</span>
                                <span class="label-text-alt text-blue-600" id="current-git-path">Current: /home</span>
                            </label>
                        </div>
                    </div>

                    <!-- Path Information Summary -->
                    <div class="mt-4">
                        <div class="flex items-center mb-2">
                            <h4 class="font-semibold text-base-content mr-2">Path Information Summary</h4>
                            <button id="toggle-path-info" type="button" class="btn btn-xs btn-ghost"><i class="ti ti-info-circle"></i></button>
                        </div>
                        <div id="path-info-summary" class="p-4 bg-base-300 rounded-lg" style="display:none;">
                            <div class="grid md:grid-cols-2 gap-4 text-sm">
                                <div>
                                    <strong>Conda Environment:</strong>
                                    <ul class="list-disc list-inside mt-1 text-base-content/70">
                                        <li>If provided: Tools will be installed in the specified conda environment</li>
                                        <li>If empty: MetaDock will use the system's active conda environment</li>
                                        <li>If no conda: Installation will fail for conda/pip tools</li>
                                    </ul>
                                </div>
                                <div>
                                    <strong>Git Installation:</strong>
                                    <ul class="list-disc list-inside mt-1 text-base-content/70">
                                        <li>If provided: Git tools will be cloned to the specified path</li>
                                        <li>If empty: Git tools will be installed in /home directory</li>
                                        <li>Path must be writable by the current user</li>
                                    </ul>
                                </div>
                            </div>
                        </div>
                    </div>
                </div>
            </div>

            <div class="card-actions justify-end mt-6">
                <button id="checkEnvironmentBtn" class="btn btn-custom-blue text-base px-6">
                    <i class="ti ti-refresh mr-2"></i>
                    Check Environment
                </button>
                <form id="install-form" action="/admin/installing" method="POST">
                    <input type="hidden" name="installationConfig" id="installationConfig">
                    <input type="hidden" name="condaEnvPath" id="condaEnvPathHidden">
                    <input type="hidden" name="gitInstallPath" id="gitInstallPathHidden">
                    <button type="submit" class="btn btn-custom-blue text-base px-8">Install All</button>
                </form>
            </div>
        </div>
    </div>
</main>

<script>
document.addEventListener('DOMContentLoaded', () => {
    const searchInput = document.getElementById('searchInput');
    const searchBtn = document.getElementById('searchBtn');
    const clearBtn = document.getElementById('clearBtn');
    const dropContainers = document.querySelectorAll('.drop-container');
    const checkEnvironmentBtn = document.getElementById('checkEnvironmentBtn');
    const condaEnvPathInput = document.getElementById('condaEnvPath');
    const gitInstallPathInput = document.getElementById('gitInstallPath');
    const condaEnvPathHidden = document.getElementById('condaEnvPathHidden');
    const gitInstallPathHidden = document.getElementById('gitInstallPathHidden');
    
    // restore search state from localStorage
    const savedSearchTerm = localStorage.getItem('optionSearchTerm');
    if (savedSearchTerm) {
        searchInput.value = savedSearchTerm;
        searchBtn.click();
    }

    // restore path config from localStorage
    const savedPaths = JSON.parse(localStorage.getItem('installationPaths') || '{}');
    if (savedPaths.condaEnvPath) {
        condaEnvPathInput.value = savedPaths.condaEnvPath;
    }
    if (savedPaths.gitInstallPath) {
        gitInstallPathInput.value = savedPaths.gitInstallPath;
    }

    // restore drag state from localStorage
    const savedToolPositions = JSON.parse(localStorage.getItem('toolPositions') || '{}');
    Object.entries(savedToolPositions).forEach(([toolId, method]) => {
        const toolElement = document.querySelector(`.tool-tag[data-tool-id="${toolId}"]`);
        if (toolElement) {
            const targetZone = document.querySelector(`#${method}-zone .drop-container`);
            if (targetZone) {
                targetZone.appendChild(toolElement);
                // update tool tag style
                toolElement.className = 'badge text-base p-4 tool-tag mb-2';
                if (method === 'anaconda') toolElement.classList.add('badge-success');
                else if (method === 'pip') toolElement.classList.add('badge-warning');
                else if (method === 'git') toolElement.classList.add('badge-info');
            }
        }
    });

    // save search state
    searchBtn.addEventListener('click', () => {
        const searchTerm = searchInput.value.toLowerCase();
        localStorage.setItem('optionSearchTerm', searchTerm);
        
        const toolTags = document.querySelectorAll('.tool-tag');
        toolTags.forEach(tag => {
            const toolName = tag.textContent.toLowerCase();
            tag.style.display = toolName.includes(searchTerm) ? '' : 'none';
        });
    });

    // clear search state
    clearBtn.addEventListener('click', () => {
        searchInput.value = '';
        localStorage.removeItem('optionSearchTerm');
        document.querySelectorAll('.tool-tag').forEach(tag => {
            tag.style.display = '';
        });
    });

    // check environment status
    checkEnvironmentBtn.addEventListener('click', async () => {
        console.log('Check environment button clicked');
        checkEnvironmentBtn.disabled = true;
        checkEnvironmentBtn.innerHTML = '<i class="ti ti-loader ti-spin mr-2"></i>Checking...';
        
        try {
            console.log('Making request to /admin/check-environment');
            const response = await fetch('/admin/check-environment', {
                method: 'GET',
                headers: {
                    'Content-Type': 'application/json'
                }
            });
            
            console.log('Response status:', response.status);
            console.log('Response headers:', response.headers);
            
            if (response.ok) {
                const data = await response.json();
                console.log('Environment check result:', data);
                
                // update page display
                updateEnvironmentDisplay(data);
                
                // show result notification
                showNotification('Environment check completed successfully!', 'success');
            } else {
                const errorText = await response.text();
                console.error('Response not ok:', response.status, errorText);
                throw new Error(`HTTP ${response.status}: ${errorText}`);
            }
        } catch (error) {
            console.error('Error checking environment:', error);
            showNotification('Failed to check environment: ' + error.message, 'error');
        } finally {
            checkEnvironmentBtn.disabled = false;
            checkEnvironmentBtn.innerHTML = '<i class="ti ti-refresh mr-2"></i>Check Environment';
        }
    });

    // update environment display
    function updateEnvironmentDisplay(data) {
        // update conda path
        const currentCondaPathElement = document.getElementById('current-conda-path');
        if (data.environment && data.environment.valid) {
            if (currentCondaPathElement) {
                currentCondaPathElement.textContent = `Current: ${data.environment.path}`;
                currentCondaPathElement.className = 'label-text-alt text-blue-600';
            }
        } else {
            if (currentCondaPathElement) {
                currentCondaPathElement.textContent = 'Current: No active environment';
                currentCondaPathElement.className = 'label-text-alt text-red-600';
            }
        }

        // update Git path
        const currentGitPathElement = document.getElementById('current-git-path');
        if (data.paths && data.paths.git && data.paths.git.valid) {
            if (currentGitPathElement) {
                currentGitPathElement.textContent = `Current: ${data.paths.git.path}`;
                currentGitPathElement.className = 'label-text-alt text-blue-600';
            }
        } else {
            if (currentGitPathElement) {
                currentGitPathElement.textContent = 'Current: /home (default)';
                currentGitPathElement.className = 'label-text-alt text-blue-600';
            }
        }
    }

    // show notification
    function showNotification(message, type = 'info') {
        // create notification element
        const notification = document.createElement('div');
        notification.className = `alert alert-${type === 'success' ? 'success' : type === 'error' ? 'error' : 'info'} fixed top-4 right-4 z-50 max-w-sm`;
        notification.innerHTML = `
            <div class="flex items-center">
                <i class="ti ${type === 'success' ? 'ti-check' : type === 'error' ? 'ti-x' : 'ti-info'} mr-2"></i>
                <span>${message}</span>
            </div>
        `;
        
        document.body.appendChild(notification);
        
        setTimeout(() => {
            if (notification.parentNode) {
                notification.parentNode.removeChild(notification);
            }
        }, 3000);
    }

    // save path config to localStorage
    function savePaths() {
        const paths = {
            condaEnvPath: condaEnvPathInput.value,
            gitInstallPath: gitInstallPathInput.value
        };
        localStorage.setItem('installationPaths', JSON.stringify(paths));
    }

    condaEnvPathInput.addEventListener('input', savePaths);
    gitInstallPathInput.addEventListener('input', savePaths);

    // initialize each drag container
    dropContainers.forEach(container => {
        new Sortable(container, {
            group: 'shared-tools',
            animation: 150,
            filter: '.method-header',
            draggable: '.tool-tag',
            onStart: (evt) => {
                const item = evt.item;
                const validMethods = JSON.parse(item.dataset.validMethods);
                
                document.querySelectorAll('.drop-zone').forEach(zone => {
                    if (validMethods.includes(zone.dataset.method)) {
                        zone.classList.add('drag-enter-ok');
                    } else {
                        zone.classList.add('drag-enter-fail');
                    }
                });
            },
            onEnd: (evt) => {
                const item = evt.item;
                const parentZone = item.closest('.drop-zone');
                
                document.querySelectorAll('.drop-zone').forEach(z => {
                    z.classList.remove('drag-enter-ok', 'drag-enter-fail');
                });

                if (!JSON.parse(item.dataset.validMethods).includes(parentZone.dataset.method)) {
                    evt.from.appendChild(item);
                    return;
                }
                
                // update drag item style
                const method = parentZone.dataset.method;
                item.className = 'badge text-base p-4 tool-tag mb-2';
                if (method === 'anaconda') item.classList.add('badge-success');
                else if (method === 'pip') item.classList.add('badge-warning');
                else if (method === 'git') item.classList.add('badge-info');

                // save new position to localStorage
                const toolPositions = JSON.parse(localStorage.getItem('toolPositions') || '{}');
                toolPositions[item.dataset.toolId] = method;
                localStorage.setItem('toolPositions', JSON.stringify(toolPositions));
            }
        });
    });

    // add click event listener to "Install All" button
    const installForm = document.getElementById('install-form');
    const installationConfigInput = document.getElementById('installationConfig');
    
    installForm.addEventListener('submit', (e) => {
        e.preventDefault();
        
        const config = {
            anaconda: [],
            pip: [],
            git: []
        };

        ['anaconda', 'pip', 'git'].forEach(method => {
            const zone = document.getElementById(`${method}-zone`);
            const toolsInZone = Array.from(zone.querySelectorAll('.tool-tag')).map(tag => ({
                id: tag.dataset.toolId,
                method: method
            }));
            config[method] = toolsInZone;
        });

        console.log('Submitting installation config:', config);
        const configJson = JSON.stringify(config);
        console.log('JSON string:', configJson);
        installationConfigInput.value = configJson;
        
        // set hidden path fields
        condaEnvPathHidden.value = condaEnvPathInput.value;
        gitInstallPathHidden.value = gitInstallPathInput.value;
        
        // clear search state after submission, but keep drag state
        localStorage.removeItem('optionSearchTerm');
        installForm.submit();
    });

    // add path info expand and hide function
    const togglePathInfoBtn = document.getElementById('toggle-path-info');
    const pathInfoSummary = document.getElementById('path-info-summary');
    
    togglePathInfoBtn.addEventListener('click', () => {
        if (pathInfoSummary.style.display === 'none') {
            pathInfoSummary.style.display = 'block';
        } else {
            pathInfoSummary.style.display = 'none';
        }
    });
});
</script>

<%- include('../../public/views/partials/footer') %>